---
title: "AdaBoost w/ SPRI on MPEG7 dataset"
format: html
jupyter: python3
editor: 
  render-on-save: true
---

```{python}
#| label: Imports 
import numpy as np
from splex import *
from pbsig import * 
from pbsig.linalg import * 
from pbsig.vis import figure_complex
from bokeh.plotting import figure, show
from bokeh.io import output_notebook
from bokeh.layouts import row
output_notebook(verbose=False)
```

```{python}
#| label: Load shape data
from pbsig.datasets import mpeg7
from operator import itemgetter
# X_data = mpeg7(simplify=100, which=["bone", "watch", "bird", "bell", "bat", 'fish','flatfish', 'fork','frog', "horse"]) # "default", "all",  
# ["turtle", "watch", "bird", "bone", "bell"]
X_data = mpeg7(simplify=100, which=["bird", "fish"])
labels = np.array(list(map(itemgetter(0), X_data.keys())))
classes = np.sort(np.unique(labels))
y = np.searchsorted(classes, labels)
```

```{python}
# | label: SHELLS weak learner (classifier)
from typing import * 
from sklearn.base import BaseEstimator, ClassifierMixin, RegressorMixin
class ShellsClassifier(BaseEstimator, ClassifierMixin):
  from pbsig.shape import shells
  def __init__(self, bins: Union[int, Iterable] = 10, dim: int = 2, random_state = None):
    self.random_state = random_state # np.random.RandomState(random_state) # used for sampling shells
    self.bins = bins
    self.dim = dim  # ambient dimension of the point cloud 
    
  def shells_signature(self, x: ArrayLike, bins: Optional[ArrayLike] = None) -> ArrayLike:
    bins = self.bins_ if bins is None else bins
    x_pc = x.reshape((len(x) // self.dim, self.dim))
    barycenter = x_pc.mean(axis=0)
    dist_to_barycenter = np.linalg.norm(x_pc - barycenter, axis=1)
    min_radius, max_radius = np.min(dist_to_barycenter), np.max(dist_to_barycenter)
    return shells(x_pc, min_radius + bins * (max_radius-min_radius), center=barycenter)

  def fit(self, X: ArrayLike, y: ArrayLike, sample_weight: ArrayLike = None, **kwargs):
    print("Sample weight is None? ", sample_weight is None)
    assert isinstance(y, np.ndarray) and all(y >= 0), "y must be non-negative integers classes"
    sample_weight = np.ones(len(X))/len(X) if sample_weight is None else sample_weight
    assert np.isclose(np.sum(sample_weight), 1.0, atol=1e-8), f"Sample weight must be a distribution ({np.sum(sample_weight):8f} != 1 )."
    
    ## Preprocessing and randomization
    rng = np.random.RandomState(self.random_state) # used for sampling shells
    self.bins_ = self.bins if isinstance(self.bins, np.ndarray) else np.sort(rng.uniform(low=0, high=1.0, size=self.bins+1))
    self.classes_, y = np.unique(y, return_inverse=True) # scikit required 
    self.n_classes_ = len(self.classes_)
    
    ## Re-weight the sample weights to be a distribution on each class
    class_weights, norm_weight = {}, sample_weight
    for cl in self.classes_: 
      class_weights[cl] = np.sum(sample_weight[y == cl])
      norm_weight[y == cl] = norm_weight[y == cl] / class_weights[cl] if class_weights[cl] > 0 else norm_weight[y == cl]

    ## Build a weighted mean curve for each class to use for prediction
    self.mean_curves = { cl : np.zeros(len(self.bins_)-1) for cl in self.classes_ }
    for x, label, w in zip(X, y, norm_weight): 
      self.mean_curves[label] += w * self.shells_signature(x, self.bins_)
    return self

  ## Needed for SAMME.R boosting
  def predict_proba(self, X: ArrayLike) -> ArrayLike:
    # https://stackoverflow.com/questions/4064630/how-do-i-convert-between-a-measure-of-similarity-and-a-measure-of-difference-di
    P = np.empty(shape=(X.shape[0], self.n_classes_))
    for i,x in enumerate(X):
      sig = self.shells_signature(x, self.bins_)
      d = np.array([np.sum(np.abs(curve-sig)) for curve in self.mean_curves.values()])
      s = np.exp(-d**1) # exponential conversion to similarity
      P[i,:] = s / np.sum(s)
    return P

  def predict(self, X: ArrayLike):
    P = self.predict_proba(X)
    return self.classes_[P.argmax(axis=1)]

  def score(self, X: ArrayLike, y: ArrayLike) -> float:
    return np.sum(self.predict(X) == y)/len(y)

# from sklearn.utils.estimator_checks import check_estimator
# check_estimator(ShellsClassifier(bins=10, dim=2))
```

```{python}
#| label: Get idea of performance on training alone (TODO: generalization error?)
X_train = np.array([np.ravel(x) for x in X_data.values()])
weak_learner = ShellsClassifier(bins=10, random_state=0)
weak_learner.fit(X_train, y)
weak_learner.score(X_train, y)

## Try different weighting scheme
w = np.random.uniform(size=len(y), low=0, high=1)
w /= np.sum(w)
weak_learner.fit(X_train, y, w)
weak_learner.score(X_train, y)
```

```{python}
#| label: Mean curve plots 
p = figure(width=400, height=225)
for x, y_label in zip(X_train, y):
  p_color = 'red' if y_label == 0 else 'blue'
  p.line(weak_learner.bins_[:-1], weak_learner.shells_signature(x), line_color=p_color, line_alpha=0.20, line_dash="dashed")
p.line(weak_learner.bins_[:-1], weak_learner.mean_curves[0], color='red', line_width=2)
p.line(weak_learner.bins_[:-1], weak_learner.mean_curves[1], color='blue', line_width=2)
show(p)
```

```{python}
class AdaBoostClassifier:
  """Binary AdaBoost classifier."""
  def __init__(self, classifier: object):
    self.weak_learner = classifier

  def fit(self, X: ArrayLike, y: ArrayLike, n_estimators: int = 100):
    from copy import deepcopy
    n = X.shape[0]
    classes_, y = np.unique(y, return_inverse=True)
    assert n == len(y) and isinstance(X, np.ndarray) and isinstance(y, np.ndarray), "Invalid (X, y) pair given."
    assert len(classes_) == 2, "AdaBoost is only a binary classifier"
    self.classes_ = classes_
    self.estimators_ = []
    self.coeffs_ = []

    ## Run the iterations
    wt = np.ones(n) # uniform coefficient weights 
    for t in range(n_estimators):
      # print(f"Iteration {t}")
      wt /= np.sum(wt)
      ht = self.weak_learner.fit(X, y, wt)  ## fit the weak learner with weighted samples; should already be randomized
      yt = ht.predict(X)                    ## compute better-than-chance weak classification 
      et = np.sum(w[yt != y]) / np.sum(w)   ## error of the current weak learner
      at = np.log((1.0-et)/et)              ## voting coefficient update  
      wt = wt * np.exp(at * np.where(yt != y, -1, 1))
      self.estimators_.append(deepcopy(ht))
      self.coeffs_.append(at)
      print(f"{t}: WL accuracy={np.sum(yt == y)/len(y)}, Full accuracy={np.sum(self.predict(X) == y)/len(y)}")
      if all(yt == y): 
        break
  
  def predict(self, X: ArrayLike) -> ArrayLike:
    y_pred = np.zeros(len(X))
    for a,h in zip(self.coeffs_, self.estimators_):
      y_pred += a * h.predict(X)
    return self.classes_[np.where(y_pred >= 0, 1, 0)]
  
  def margin(self):
    pass 


A = AdaBoostClassifier(ShellsClassifier(bins=10))
A.fit(X_train, y, n_estimators=50)
A.predict(X_train)

A.estimators_[0].bins_

```



```{python}
#| label: PCA plot of the data
from bokeh.palettes import turbo, viridis
from pbsig.linalg import pca
X_train = np.array([np.ravel(x) for x in X_data.values()])
# X_train = np.array([np.ravel(shells(x, 20)) for x in X_data.values()])
Z_train = pca(X_train)
p = figure(width=375, height=375)
p.scatter(*Z_train.T, color=np.array(viridis(len(np.unique(y))))[y.astype(np.uint)])
show(p)
```

```{python}
#| label: Create a "weak learner"
from pbsig.betti import Sieve
from pbsig.simplicial import cycle_graph
from pbsig.pht import parameterize_dt
X_train = X[('turtle',1)]
K = cycle_graph(len(X_train))
dt_filters = parameterize_dt(X_train, dv = 32)
sieve = Sieve(K, family = dt_filters)
sieve.randomize_pattern(1, lb=0, ub=3, area=(0.05**2, 0.15**2), max_asp=5)
sieve.solver.params['tol'] = 1e-4 
sieve.sift(w=1.0, k=10, progress=False)
np.allclose(np.ravel(sieve.summarize()), 0.0, atol=1e-9)

from bokeh.models import Range1d
p = figure(height=150, width=275)
p.line(np.arange(32), np.ravel(sieve.summarize()))
p.y_range = Range1d(-1, 1)
show(p)
```

```{python}
#| label:  Logistic regression baseline
from pbsig.shape import shells 
from sklearn.linear_model import LogisticRegression, LogisticRegressionCV
# X_train = np.array([np.ravel(x) for x in X_data.values()])
X_train = np.array([np.ravel(shells(x,20)) for x in X_data.values()])
model = LogisticRegression(random_state=0, penalty="l2").fit(X_train, y)
model = LogisticRegressionCV(random_state=0, penalty="l2").fit(X_train, y)

## Get accuracy
print(sum(model.predict(X_train) != y))

## 10-fold cross-validation --- generalization accuracy for shells around ~ 25%
## Point cloud data (as-is) w/ 100 points: train/test accuracy averages 86/68%, respectively
## Shells vector (10 shells): train/test accuracy averages 50/37%, respectively
from sklearn.model_selection import cross_validate
cross_validate(model, X_train, y, cv=10, verbose=1, scoring="accuracy", return_train_score=True)

from bokeh.palettes import turbo
Z = cmds(squareform(pdist(X_train)**2))
p = figure(width=375, height=375)
p.scatter(*Z.T, color=np.array(turbo(len(np.unique(y))))[y.astype(np.uint)])
show(p)

from sklearn.manifold import TSNE
z = TSNE(2).fit_transform(X_train)
p = figure(width=375, height=375)
p.scatter(*z.T, color=np.array(turbo(len(np.unique(y))))[y.astype(np.uint)])
show(p)
```

Test the shells classifier in binary label situation
```{python}

```

```{python}


```




```{python}
X_train = np.array([np.ravel(x) for x in X_data.values()])
weak_learner = ShellsLearner(k=3, d=2, random_state=1)
weak_learner.fit(X_train, y)
# weak_learner.predict_proba(X_train)
print(f"Accuracy: {np.sum(weak_learner.predict(X_train) == y)/len(y):.2f}")
cross_validate(weak_learner, X_train, y, cv=10, verbose=1, scoring="accuracy", return_train_score=True)

## TODO: find a case where two classes severely overlap and logistci struggles. 
## Logistic is already a power-house with OvR enabled, need to re-create the multi-class functionality from scratch here 
from sklearn.ensemble import AdaBoostClassifier
ensemble_logistic = AdaBoostClassifier(LogisticRegression(penalty="l2"), n_estimators=20, algorithm="SAMME.R", random_state=1234)
ensemble_logistic.fit(X_train, y)
cross_validate(ensemble_logistic, X_train, y, cv=10, verbose=1, scoring="accuracy", return_train_score=True)

np.array(list(ensemble_logistic.staged_score(X_train, y)))

ensemble = AdaBoostClassifier(ShellsLearner(k=10, d=2), n_estimators=200, algorithm="SAMME.R", random_state=1234)
ensemble.fit(X_train, y)

[est.n_classes_ for est in ensemble.estimators_]



boosted_scores = np.array(list(ensemble.staged_score(X_train, y)))
p = figure()
p.line(np.arange(len(boosted_scores)), boosted_scores)
show(p)


res = list(ensemble.staged_predict(X_train))

## Fit the classifier

print(ensemble.estimator_weights_)
print(ensemble.estimator_errors_)
print(f"Accuracy: {np.sum(ensemble.predict(X_train) == y)/len(y):.2f}")
cross_validate(ensemble, X_train, y, cv=10, verbose=1, scoring="accuracy", return_train_score=True)


est1 = ensemble.estimators_[1]
(len(y) - np.sum(est1.predict(X_train) != y))/len(y)
# np.histogram(ensemble.estimator_weights_)

# random_stateint, RandomState instance or None, default=None
# Controls the random seed given at each estimator at each boosting iteration. Thus, it is only used when estimator exposes a random_state. Pass an int for reproducible output across multiple function calls. See Glossary.

```


```{python}
#| label: Natural gradient boosting 
from ngboost import NGBClassifier
from ngboost.distns import k_categorical, Bernoulli
from ngboost.scores import LogScore, CRPScore

X_train = np.array([np.ravel(x) for x in X_data.values()])

## Need a regressor as a base learner to use ngboost ~ 
## See: https://github.com/stanfordmlgroup/ngboost/issues/225
weak_learner = ShellsLearner(k=3, d=2, random_state=1)
classifier = NGBClassifier(Base=weak_learner, Dist=k_categorical(len(np.unique(y))), verbose=False)
_ = classifier.fit(X_train, y)


```





Benchmarking 
```{python}
def _bench():
  ## For a given feature, create a reference mean curve for each class, phase aligned
  from pbsig.dsp import phase_align
  from pbsig.utility import progressbar
  mean_curves = {}
  sieve.randomize_pattern(1, lb=0, ub=3, area=(0.05**2, 0.15**2), max_asp=5)
  i = 0
  for x_pc, y_label in progressbar(zip(X.values(), y), len(y)):
    sieve.family = parameterize_dt(x_pc, dv = 16)
    sieve.sift(w=1, progress=False)
    feature_summary = np.ravel(sieve.summarize())
    if y_label in mean_curves: 
      mean_curves[y_label] += phase_align(feature_summary, mean_curves[y_label])
    else: 
      mean_curves[y_label] = feature_summary
    if i < 20: 
      i += 1
    else: 
      break
  mean_curves = { cl : ts / sum(y == cl) for cl, ts in mean_curves.items() }

sieve.solver = PsdSolver(sieve.laplacian, solver='lanczos', ncv=5, tolerance=1e-1, k=5, maxiter=30, return_stats=True, return_eigenvectors=True, return_unconverged=True)
res = sieve.solver(sieve.laplacian)
sieve.solver(sieve.laplacian, v0=res[1], return_eigenvectors=True)

sieve.solver(sieve.laplacian)

sieve.solver = PsdSolver(sieve.laplacian, solver='lanczos', ncv=5, tolerance=1e-1, k=5, maxiter=30, return_stats=False, return_eigenvectors=False, return_unconverged=True)
from line_profiler import LineProfiler
profiler = LineProfiler()
profiler.add_function(_bench)
profiler.add_function(sieve.sift)
profiler.add_function(sieve.project)
profiler.add_function(sieve.solver.solver)
profiler.add_function(sieve.solver.__call__)
profiler.enable_by_count()
_bench()
profiler.print_stats(output_unit=1e-3)
# from pbsig.dsp import phase_align2
# s1 = np.roll(s2, 15) + np.random.uniform(size=len(s2), low=-1e-4, high=1e-4)
# p = figure(width=250, height=175)
# p.line(np.arange(len(s1)), s1, color='orange')
# p.line(np.arange(len(s1)), phase_align2(s1,s2), color='red')
# p.line(np.arange(len(s2)), s2, color='blue')
# show(p)

```



```{python}
from sklearn.ensemble import AdaBoostRegressor




class SieveWeakClassifier:
  def __init__(sieve, curves: dict):
    self.curves = curves
    self.sift_params = {}

  def predict_proba(X: ArrayLike):
    assert len(X) == sieve.laplacian.nv, "Number of vertices must match"
    sieve.family = parameterize_dt(X, dv = 32)
    sieve.sift(**self.sift_params)
    curve = np.ravel(sieve.summarize())
    curve - 



import timeit
timeit.timeit(lambda: sieve.sift(w=1.0, k=55, tol=1), number=5)


## TODO: 
# from scipy.sparse.linalg.eigen import arpack
# Import _SymmetricArpackParams from arpack and see how to control the behavior from there\
from line_profiler import LineProfiler
profiler = LineProfiler()
profiler.add_function(sieve.sift)
profiler.add_function(sieve.project)
profiler.add_function(sieve.solver.__call__)
profiler.add_function(sieve.solver.solver)
profiler.enable_by_count()
sieve.sift(w=1.0, k=55, tol=1)
profiler.print_stats(output_unit=1e-3)
```
