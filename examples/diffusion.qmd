---
title: "Diffusion w/ Laplacians"
format: html
jupyter: python3
editor: 
  render-on-save: true
---

```{python}
import bokeh
from bokeh.io import output_notebook
from bokeh.plotting import figure, show
from bokeh.layouts import row, column
from pbsig.vis import figure_complex
from pbsig.color import bin_color
output_notebook()
```


```{python}
import numpy as np
from splex import *
np.random.seed(1234)
X = np.random.uniform(size=(50,2), low=0, high=1)
S = delaunay_complex(X)

from pbsig.linalg import * 
L = up_laplacian(S, normed = True)
# show(figure_complex(S, X))

from scipy.sparse.linalg import eigsh
ew, ev = eigsh(L, k=L.shape[1]-1)
ind = np.argmin(X @ np.array([0,1]))

## Show heat diffusion from a single vertex 
figs = []
for t in np.exp(np.linspace(0, 3, 5)): 
  Ht = ev @ np.diag(np.exp(-t*ew)) @ ev.T
  p = figure_complex(S, X, height=250, width=250)
  p.scatter(*X.T, color=bin_color(Ht[:,ind], "viridis"), size=10.5)
  figs.append(p)
show(row(*figs))


## Show heat kernel signatures
def hks(L: LinearOperator, T: np.ndarray, subset = None, **kwargs):
  """Constructs the heat kernel signature of a given Laplacian operator at time points T. 
  
  For a subset S \subseteq V of vertices, this returns a  |T| x |S| signature. 
  """
  from pbsig.linalg import eigh_solver
  ew, ev = eigh_solver(L)(L, sigma=0, which="LM", **kwargs)
  # [np.sum(np.exp(-0.5*ew) * ev[i,:]**2) for i in range(L.shape[0])][:10]
  ## Could use subsets of points vis-a-via rows of ev to get smaller signature?
  I = np.arange(L.shape[0]) if subset is None else np.array(subset)
  ev_subset = ev[I]**2 
  hks_matrix = np.array([ev_subset @ np.exp(-t*ew) for t in T])
  return hks_matrix
    
def hkt(L: LinearOperator, T: np.ndarray):
  """Computes the heat kernel trace of a gievn Laplacian operators at time points T.
  """
  from pbsig.linalg import eigvalsh_solver
  ew = eigvalsh_solver(L)(L, sigma=0, which="LM", **kwargs)
  return np.array([np.sum(np.exp(-t*ew)) for t in T])

```

## Heat kernel signature

```{python}
from scipy.sparse.linalg import eigsh
import timeit


ew, ev = eigsh(L, k=10)
timeit.timeit(lambda: eigsh(L, k=20, sigma=0, which="LM"), number=30)
ew, ev = eigsh(L, k=10, sigma=0, which="LM")

```



